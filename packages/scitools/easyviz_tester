#!/usr/bin/env python
__doc__ = """
Usage:

./make
./make --test --backend=[vtk, gnuplot, matplotlib, template]
./make --test3d
./make --unittest
"""

# Add the following to .bashrc to run this script with the make command
"""
# Run make without a Makefile
make_if_make () {
  if [ -x ./make ]
  then
    ./make $@
  else
    make $@
  fi
  return $?
}
alias make=make_if_make
"""

__author__ = 'Rolv Erlend Bredesen <rolv@simula.no>'

import commands
import sys
import os
import glob
from optparse import OptionParser

if __name__ == '__main__':
    parser = OptionParser(usage=__doc__)
    parser.formatter.format_usage = lambda usage: usage # no 'usage: '+ usage
    parser.add_option('-b', '--backend',
                      nargs=1,
                      default='',
                      help='Which backend to use for testing',
                      choices='vtk gnuplot matplotlib template'.split(),
                      )
    parser.add_option('-t', '--test',
                      action='store_true',
                      default=False,
                      help='Run example tests',
                      )
    parser.add_option('--test3d',
                      action='store_true',
                      default=False,
                      help='Run 3d example tests',
                      )
    parser.add_option('-u',
                      '--unittest',
                      dest='unittest', 
                      action='store_true', default=False,
                      help='Run unittest')
    # My little easter egg...
    from optparse import SUPPRESS_HELP
    parser.add_option("--secret",
                      action='store_true', default=False,
                      help=SUPPRESS_HELP)

    options, args = parser.parse_args(sys.argv[1:])    

    # Test whether ipython is starting the make script 
    e = None
    try:
        __IPYTHON__
        print "running ipython"
        args = args[1:] 
    except Exception, e:
        print e, "so you're not running ipython"
        
    # Default install
    if 'install' in args:
        cmd = 'python setup.py install'
        print "\n\nRun the following command in shell:\n%s\n" %cmd
    
    # Remove (previous installation) and install with the prefix-scheme
    if 'make' in sys.argv[-1]:
        cmd = 'rm -rf %(prefix)s/lib/python%(pyversion)s/site-packages/easyviz/ '\
        '&& ' \
        'python setup.py install --prefix=$PREFIX' \
        %{
        'prefix': os.environ.get('PREFIX',sys.prefix),
        'pyversion': '.'.join(map(str,sys.version_info[:2]))
        }

        if 'y' in raw_input('Execute the following command? \n%s\n[y/N]' %cmd):
            print ''
            print commands.getoutput(cmd)
            print ''

    # Override backend for sessions started here
    if options.backend:
        os.environ['easyviz_backend'] = options.backend+'_' # template_ backend
            
    # Unittest
    if options.unittest:
        from easyviz import unittest_
        execfile(unittest_.__file__[:-1]) # py not pyc
        
    # Specific test (examples.py
    if options.test:
        import easyviz
        path = easyviz.__path__[0]
        b = ''
        if options.backend:
            b = options.backend + '_'
        # command-line arguments: n screenplot flash psplot
        # screenplot: show plots on the screen?
        # flash: drop prompt between plots and clf, everything goes into one plot
        # psplot: make hardcopy of each plot?
        # 1 0 1 1 gives execution in batch without user interaction
        print os.system('python %s/examples.py %s '  %(path, b))
    # examples_vtk.py
    if options.test3d:
        from easyviz import examples_vtk
        execfile(examples_vtk.__file__[:-1]) # py not pyc
                
    if options.secret:
        print "..... and that was Rolv's big secret"
    
    # Test template_ only (defined here)
    if 'test' in args:
        os.environ['easyviz_backend'] = 'template_' # template_ backend
        os.environ['easyviz_backend'] = 'matplotlib_' # template_ backend
        from easyviz import *

        # Test plot without arguments
        if False:
            try:
                plot(show=False)
            except Exception, e:
                print str(e), repr(e)
                print sys.exc_info()    
            else:
                #raise Exception 
                print "plot(show=False) command works"        

        set(show=False)
        figure(1)
        hold('on')

        #subplot(3,2,4)
        #contour(([[1,2,3],[34,5,5]]))
        #plot((1,2,3))
        #surf([[1,2,3],[34,5,5]])
        plot((1,2,3),show=True)

        #plt._magic()
        #hardcopy('trall.ps')
        

    testoutput = glob.glob('*[.e]ps')
    #if len(testoutput):
    #    if 'y' in raw_input("Cleanup outputfiles?\n%s" %repr(testoutput)):
    #        for f in testoutput:
    #            os.remove(f)
                
